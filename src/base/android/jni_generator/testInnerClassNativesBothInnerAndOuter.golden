// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/TestJni

#ifndef org_chromium_TestJni_JNI
#define org_chromium_TestJni_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kClassPath_org_chromium_TestJni_00024MyOtherInnerClass[] =
    "org/chromium/TestJni$MyOtherInnerClass";
const char kClassPath_org_chromium_TestJni[] = "org/chromium/TestJni";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_org_chromium_TestJni_00024MyOtherInnerClass_clazz
    __attribute__((unused)) = 0;

inline jclass org_chromium_TestJni_00024MyOtherInnerClass_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_TestJni_00024MyOtherInnerClass,
      &g_org_chromium_TestJni_00024MyOtherInnerClass_clazz);
}
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_org_chromium_TestJni_clazz __attribute__((unused)) =
    0;

inline jclass org_chromium_TestJni_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_TestJni,
      &g_org_chromium_TestJni_clazz);
}

}  // namespace

// Step 2: method stubs.

static jint Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

JNI_GENERATOR_EXPORT jint Java_org_chromium_TestJni_nativeInit(JNIEnv* env,
    jobject jcaller) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static jint Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_TestJni_00024MyOtherInnerClass_nativeInit(JNIEnv* env,
    jobject jcaller) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

// Step 3: RegisterNatives.

static const JNINativeMethod
    kMethods_org_chromium_TestJni_00024MyOtherInnerClass[] = {
    { "nativeInit",
"("
")"
"I",
    reinterpret_cast<void*>(Java_org_chromium_TestJni_00024MyOtherInnerClass_nativeInit)
    },
};

static const JNINativeMethod kMethods_org_chromium_TestJni[] = {
    { "nativeInit",
"("
")"
"I", reinterpret_cast<void*>(Java_org_chromium_TestJni_nativeInit) },
};

// TODO(agrieve): Remove these empty registration functions and functions
// calling them. https://crbug.com/683256.
inline bool RegisterNativesImpl(JNIEnv* env) {
  return true;
}

JNI_REGISTRATION_EXPORT bool RegisterNative_org_chromium_TestJni(JNIEnv* env) {

  const int kMethods_org_chromium_TestJni_00024MyOtherInnerClassSize =
      arraysize(kMethods_org_chromium_TestJni_00024MyOtherInnerClass);

  if
      (env->RegisterNatives(org_chromium_TestJni_00024MyOtherInnerClass_clazz(env),
                           kMethods_org_chromium_TestJni_00024MyOtherInnerClass,
kMethods_org_chromium_TestJni_00024MyOtherInnerClassSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, org_chromium_TestJni_00024MyOtherInnerClass_clazz(env), __FILE__);
    return false;
  }

  const int kMethods_org_chromium_TestJniSize =
      arraysize(kMethods_org_chromium_TestJni);

  if (env->RegisterNatives(org_chromium_TestJni_clazz(env),
                           kMethods_org_chromium_TestJni,
                           kMethods_org_chromium_TestJniSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, org_chromium_TestJni_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_TestJni_JNI
