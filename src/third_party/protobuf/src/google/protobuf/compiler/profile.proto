// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: seongkim@google.com (Seong Beom Kim)
//
// protoc (Protocol Compiler) can generate more efficient code
// if it knows how a workload accesses fields of a message;
// e.g. some much more frequently than others.
//
// Protos defined here describe the access information per message
// and per field. Note that one can use any methods to collect
// the access patterns like CPU profiling, instrumented build, etc.

syntax = "proto2";

package google.protobuf.compiler;

// To convey the access pattern of a field, it classifies
// the type of the accessor methods into getters, setters and
// configs. Getters and setters read and write the field
// respectively and other operations like checking if the field
// exists are considered as configs.
message FieldAccessInfo {
  optional string name = 1;
  optional uint64 getters_count = 2;
  optional uint64 setters_count = 3;
  optional uint64 configs_count = 4;
}

// "count" correlates with how many samples an access info has
// for a message. High "count" means more confident optimization
// based on the info.
message MessageAccessInfo {
  optional string name = 1;
  optional uint64 count = 2;
  repeated FieldAccessInfo field = 3;
}

message AccessInfo {
  repeated MessageAccessInfo message = 1;
}
